
总参数：
    # 1. 建立各参数。要调整的地方都在 p 这了，其它函数都给写死。
    if not p:
        t = 'v'                       # 写1就是valid, 写0就是test
        assert 't' == t or 'v' == t   # no other case
        p = OrderedDict(
            [
                ('dataset',             'user_buys.txt'),
                ('fea_image',           'normalized_features_image/'),
                ('fea_text',            'normalized_features_text/'),
                ('mode',                'test' if 't' == t else 'valid'),
                ('split',               [0.8, 1.0] if 't' == t else [0.6, 0.8]),  # valid: 6/2/2。test: 8/2.
                ('at_nums',             [10, 20, 30, 50]),  # 5， 15
                ('intervals',           [2, 10, 30]),       # 以次数2为间隔，分为10个区间. 计算auc/recall@30上的. 换为10
                ('epochs',              30 if 'taobao' in PATH else 50),
                ('alpha',               0.1),

                ('latent_size',         [20, 1024, 100]),
                ('lambda',              0.001),         # 要不要self.lt和self.ux/wh/bi用不同的lambda？
                ('lambda_ev',           0.0),           # 图文降维局矩阵的。就是这个0.0
                ('lambda_ae',           0.001),         # 重构误差的。

                ('train_fea_zero',      0.0),   # denoising模式。0.1、0.2/0.3
                ('mini_batch',          1),     # 0:one_by_one,     1:mini_batch
                ('mvgru',               0),     # 0:gru,
                                                # 1:mv-gru-1unit, 2:mv-gru-2units, 3:mv-gru-con, 4:mv-gru-fusion

                ('batch_size_train',    4),     # size大了之后性能下降非常严重
                ('batch_size_test',     768),   # user*item矩阵太大，要多次计算。a5下亲测768最快。
            ])
        for i in p.items():
            print(i)


tk10 - valid
    ('mode', 'valid')
    ('split', [0.6, 0.8])
    Original data ...
        users, items, trans:    = 478391, 145867, 7558233
        time_stamp min, max:    = [1402675200, 1434297600]
        time_date  min, max:    = [2014.06.14 00:00:00, 2015.06.15 00:00:00]
        avg. user buy:          = 15.7992792507
        avg. item bought:       = 51.815921353
    Remove duplicates in test set: mode = valid ...
        users, items, trans:    = 406603, 124196, 4666020
        time_stamp min, max:    = [1402675200, 1434297600]
        time_date  min, max:    = [2014.06.14 00:00:00, 2015.06.15 00:00:00]
        avg. user buy:          = 11.4756162645
        avg. item bought:       = 37.5698090116
        useful, only left, only right: = 406603 + 63435 + 8353 = 478391
    Use aliases to represent items ...
    Devide test items into intervals ...
        intervals               = [2, 10, 30]
        test_i_intervals_items  = 88525, [25572, 14084, 9500, 7399, 5552, 3977, 3044, 2279, 1799, 15319]
        test_i_intervals_trans  = 1362688, [36080, 48464, 51862, 55173, 52555, 45549, 40999, 35216, 31436, 965354]
        test_i_cold_active_items= 88525, [39656, 48869]
        test_i_cold_active_trans= 1362688, [84544, 1278144]


tk15 - valid
    ('mode', 'valid')
    ('split', [0.6, 0.8])
    Original data ...
        users, items, trans:    = 89634, 34903, 1912708
        time_stamp min, max:    = [1402675200, 1434297600]
        time_date  min, max:    = [2014.06.14 00:00:00, 2015.06.15 00:00:00]
        avg. user buy:          = 21.3390900774
        avg. item bought:       = 54.8006761596
    Remove duplicates in test set: mode = valid ...
        users, items, trans:    = 79409, 30347, 1193533
        time_stamp min, max:    = [1402675200, 1434297600]
        time_date  min, max:    = [2014.06.14 00:00:00, 2015.06.15 00:00:00]
        avg. user buy:          = 15.0301980884
        avg. item bought:       = 39.3295218638
        useful, only left, only right: = 79409 + 8457 + 1768 = 89634
    Use aliases to represent items ...
    Devide test items into intervals ...
        intervals               = [2, 10, 30]
        test_i_intervals_items  = 22516, [5747, 3230, 2277, 1743, 1377, 1174, 971, 808, 629, 4560]
        test_i_intervals_trans  = 329037, [8048, 11108, 12401, 13070, 13068, 13485, 13050, 12519, 10970, 221318]
        test_i_cold_active_items= 22516, [8977, 13539]
        test_i_cold_active_trans= 329037, [19156, 309881]


tk20 - valid
    ('mode', 'valid')
    ('split', [0.6, 0.8])
    Original data ...
        users, items, trans:    = 3536, 1843, 124453
        time_stamp min, max:    = [1402675200, 1434297600]
        time_date  min, max:    = [2014.06.14 00:00:00, 2015.06.15 00:00:00]
        avg. user buy:          = 35.1959841629
        avg. item bought:       = 67.5274009767
    Remove duplicates in test set: mode = valid ...
        users, items, trans:    = 1731, 1277, 48855
        time_stamp min, max:    = [1402675200, 1434297600]
        time_date  min, max:    = [2014.06.14 00:00:00, 2015.06.15 00:00:00]
        avg. user buy:          = 28.2235701906
        avg. item bought:       = 38.2576350822
        useful, only left, only right: = 1731 + 1345 + 460 = 3536
    Use aliases to represent items ...
    Devide test items into intervals ...
        intervals               = [2, 10, 30]
        test_i_intervals_items  = 596, [392, 45, 11, 7, 4, 7, 5, 4, 3, 118]
        test_i_intervals_trans  = 6999, [444, 147, 60, 51, 39, 81, 69, 63, 53, 5992]
        test_i_cold_active_items= 596, [437, 159]
        test_i_cold_active_trans= 6999, [591, 6408]


